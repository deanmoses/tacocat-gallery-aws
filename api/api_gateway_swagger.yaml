---
swagger: "2.0"
info:
  version: "2018-11-02T04:06:20Z"
  title: "Tacocat Gallery API"
basePath: "/prod"
schemes:
- "https"
paths:
  /:
    get:
      consumes:
      - "application/json"
      produces:
      - "text/html"
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'text/html'"
            responseTemplates:
              text/html: "<html>\n    <head>\n        <style>\n        body {\n  \
                \          color: #333;\n            font-family: Sans-serif;\n  \
                \          max-width: 800px;\n            margin: auto;\n        }\n\
                \        </style>\n    </head>\n    <body>\n        <h1>Welcome to\
                \ the Tacocat Gallery API</h1>\n        <p>\n            You have\
                \ succesfully deployed your first API. You are seeing this HTML page\
                \ because the <code>GET</code> method to the root resource of your\
                \ API returns this content as a Mock integration.\n        </p>\n\
                \        <p>\n            The Pet Store API contains the <code>/pets</code>\
                \ and <code>/pets/{petId}</code> resources. By making a <a href=\"\
                /$context.stage/pets/\" target=\"_blank\"><code>GET</code> request</a>\
                \ to <code>/pets</code> you can retrieve a list of Pets in your API.\
                \ If you are looking for a specific pet, for example the pet with\
                \ ID 1, you can make a <a href=\"/$context.stage/pets/1\" target=\"\
                _blank\"><code>GET</code> request</a> to <code>/pets/1</code>.\n \
                \       </p>\n        <p>\n            You can use a REST client such\
                \ as <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>\
                \ to test the <code>POST</code> methods in your API to create a new\
                \ pet. Use the sample body below to send the <code>POST</code> request:\n\
                \        </p>\n        <pre>\n{\n    \"type\" : \"cat\",\n    \"price\"\
                \ : 123.11\n}\n        </pre>\n    </body>\n</html>"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /album:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Albums"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Query"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n\t\"TableName\":\"${stageVariables.AlbumTableName}\"\
            ,\n\t\"IndexName\":\"userID-creationTime-index\",\n\t\"KeyConditionExpression\"\
            :\"userID = :userID\",\n\t\"ExpressionAttributeValues\": \n\t\t{\n\t\t\
            \t\":userID\":\n\t\t\t\t{\"S\":\"moses\"}\n\t\t},\n\t\"ScanIndexForward\"\
            :false\n}"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    post:
      operationId: "CreateAlbum"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "NewAlbum"
        required: true
        schema:
          $ref: "#/definitions/NewAlbum"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/NewAlbumResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://petstore-demo-endpoint.execute-api.com/petstore/pets"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /album/{path}:
    get:
      operationId: "GetAlbum"
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Album"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://petstore-demo-endpoint.execute-api.com/petstore/pets/{path}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.petId: "method.request.path.path"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "path"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  Empty:
    type: "object"
  NewAlbumResponse:
    type: "object"
    properties:
      album:
        $ref: "#/definitions/Album"
      message:
        type: "string"
  NewAlbum:
    type: "object"
    properties:
      type:
        $ref: "#/definitions/AlbumType"
      price:
        type: "number"
  Album:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
      price:
        type: "number"
  AlbumType:
    type: "string"
    enum:
    - "week"
    - "year"
  Albums:
    type: "array"
    items:
      $ref: "#/definitions/Album"