openapi: "3.0.1"
info:
  title: "Tacocat Gallery API"
  version: "2018-11-02T15:17:31Z"
paths:
  /album/{path}:
    get:
      operationId: "GetAlbum"
      parameters:
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Query"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n\t\"TableName\":\"${stageVariables.ImageTableName}\"\
            ,\n\t\"IndexName\":\"albumID-uploadTime-index\",\n\t\"KeyConditionExpression\"\
            :\"albumID = :albumID\",\n\t\"ExpressionAttributeValues\":{\":albumID\"\
            :{\"S\":\"moses/$input.params('path')\"}},\n\t\"ScanIndexForward\":false\n\
            }"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      parameters:
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/PutItem"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n\t\"TableName\":\"${stageVariables.AlbumTableName}\"\
            ,\n\t\"Item\":\n\t{\n\t\t\"albumID\":{\"S\":\"moses/$input.params('path')\"\
            },\n\t\t\"userID\":{\"S\":\"moses\"},\n\t\t\"name\":{\"S\":\"$input.params('path')\"\
            },\n\t\t\"creationTime\":{\"N\":\"$context.requestTimeEpoch\"}\n\t},\n\
            \t\"ConditionExpression\":\"attribute_not_exists (albumID)\"\n}"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    delete:
      parameters:
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/DeleteItem"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n    \"TableName\": “:AlbumTableName\",\n    \"Key\"\
            : {\n        \"albumID\": {\n            \"S\": \"moses/:albumID\"\n \
            \       }\n    },\n    \"ExpressionAttributeValues\": {\n        “:AlbumTableName\"\
            : {\"S\": \"${stageVariables.AlbumTableName}\"},\n        \":albumID\"\
            : {\"S\": \"$input.params('path')\"}\n    },\n    \"ReturnValues\": \"\
            ALL_OLD\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      parameters:
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    patch:
      parameters:
      - name: "description"
        in: "query"
        schema:
          type: "string"
      - name: "title"
        in: "query"
        schema:
          type: "string"
      - name: "published"
        in: "query"
        schema:
          type: "string"
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/UpdateItem"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "#set($title = $input.params('title'))\n#set($desc = $input.params('description'))\n\
            {\n    \"TableName\": \"${stageVariables.AlbumTableName}\",\n    \"Key\"\
            : {\"albumID\": {\"S\": \"moses/$input.params('path')\"}},\n    \"UpdateExpression\"\
            : \"set #if(\"$!title\" != \"\")title = $title#end#if(\"$!title\" != \"\
            \" && \"$!desc\" != \"\"),#end#if(\"$!desc\" != \"\")title = $desc#end\"\
            ,\n    \"ConditionExpression\": \"attribute_exists(albumID)\"\n    \"\
            ReturnValues\": \"UPDATED_NEW\"\n}"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
  /album:
    get:
      parameters:
      - name: "type"
        in: "query"
        schema:
          type: "string"
      - name: "page"
        in: "query"
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Albums"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:dynamodb:action/Query"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n\t\"TableName\":\"${stageVariables.AlbumTableName}\"\
            ,\n\t\"IndexName\":\"userID-creationTime-index\",\n\t\"KeyConditionExpression\"\
            :\"userID = :userID\",\n\t\"ExpressionAttributeValues\": \n\t\t{\n\t\t\
            \t\":userID\":\n\t\t\t\t{\"S\":\"moses\"}\n\t\t},\n\t\"ScanIndexForward\"\
            :false\n}"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /:
    get:
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'text/html'"
            responseTemplates:
              text/html: "<html>\n    <head>\n        <style>\n        body {\n  \
                \          color: #333;\n            font-family: Sans-serif;\n  \
                \          max-width: 800px;\n            margin: auto;\n        }\n\
                \        </style>\n    </head>\n    <body>\n        <h1>Welcome to\
                \ the Tacocat Gallery API</h1>\n        <p>\n            You have\
                \ succesfully deployed your first API. You are seeing this HTML page\
                \ because the <code>GET</code> method to the root resource of your\
                \ API returns this content as a Mock integration.\n        </p>\n\
                \        <p>\n            The Pet Store API contains the <code>/pets</code>\
                \ and <code>/pets/{petId}</code> resources. By making a <a href=\"\
                /$context.stage/pets/\" target=\"_blank\"><code>GET</code> request</a>\
                \ to <code>/pets</code> you can retrieve a list of Pets in your API.\
                \ If you are looking for a specific pet, for example the pet with\
                \ ID 1, you can make a <a href=\"/$context.stage/pets/1\" target=\"\
                _blank\"><code>GET</code> request</a> to <code>/pets/1</code>.\n \
                \       </p>\n        <p>\n            You can use a REST client such\
                \ as <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>\
                \ to test the <code>POST</code> methods in your API to create a new\
                \ pet. Use the sample body below to send the <code>POST</code> request:\n\
                \        </p>\n        <pre>\n{\n    \"type\" : \"cat\",\n    \"price\"\
                \ : 123.11\n}\n        </pre>\n    </body>\n</html>"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    Empty:
      type: "object"
    Album:
      type: "object"
      properties:
        name:
          type: "string"
        type:
          type: "string"
        price:
          type: "number"
    Albums:
      type: "array"
      items:
        $ref: "#/components/schemas/Album"
