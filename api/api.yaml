openapi: "3.0.1"
info:
  title: "Tacocat Gallery API"
  version: "2018-11-10T20:19:31Z"
paths:
  /latest-album:
    get:
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:010410881828:function:${stageVariables.GetLatestAlbumFunctionName}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /album:
    get:
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:010410881828:function:${stageVariables.GetAlbumFunctionName}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /image/{imagePath+}:
    patch:
      parameters:
        - name: "imagePath"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:010410881828:function:${stageVariables.UpdateImageFunctionName}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "amhv5q"
        cacheKeyParameters:
          - "method.request.path.imagePath"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /thumb/{imagePath+}:
    patch:
      parameters:
        - name: "imagePath"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:010410881828:function:${stageVariables.RecutThumbnailFunctionName}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "amhv5q"
        cacheKeyParameters:
          - "method.request.path.imagePath"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /album-thumb/{albumPath+}:
    patch:
      parameters:
        - name: "albumPath"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:010410881828:function:${stageVariables.SetAlbumThumbnailFunctionName}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "amhv5q"
        cacheKeyParameters:
          - "method.request.path.albumPath"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /:
    get:
      responses:
        200:
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'text/html'"
            responseTemplates:
              text/html:
                "<html>\n    <head>\n        <style>\n        body {\n  \
                \          color: #333;\n            font-family: Sans-serif;\n  \
                \          max-width: 800px;\n            margin: auto;\n        }\n\
                \        </style>\n    </head>\n    <body>\n        <h1>Welcome to\
                \ the Tacocat Gallery API</h1>\n        <p>\n            You have\
                \ succesfully deployed your first API. You are seeing this HTML page\
                \ because the <code>GET</code> method to the root resource of your\
                \ API returns this content as a Mock integration.\n        </p>\n\
                \        <p>\n            The Pet Store API contains the <code>/pets</code>\
                \ and <code>/pets/{petId}</code> resources. By making a <a href=\"\
                /$context.stage/pets/\" target=\"_blank\"><code>GET</code> request</a>\
                \ to <code>/pets</code> you can retrieve a list of Pets in your API.\
                \ If you are looking for a specific pet, for example the pet with\
                \ ID 1, you can make a <a href=\"/$context.stage/pets/1\" target=\"\
                _blank\"><code>GET</code> request</a> to <code>/pets/1</code>.\n \
                \       </p>\n        <p>\n            You can use a REST client such\
                \ as <a href=\"https://www.getpostman.com/\" target=\"_blank\">Postman</a>\
                \ to test the <code>POST</code> methods in your API to create a new\
                \ pet. Use the sample body below to send the <code>POST</code> request:\n\
                \        </p>\n        <pre>\n{\n    \"type\" : \"cat\",\n    \"price\"\
                \ : 123.11\n}\n        </pre>\n    </body>\n</html>"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /album/{albumPath+}:
    get:
      parameters:
        - name: "albumPath"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:010410881828:function:${stageVariables.GetAlbumFunctionName}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "68kvx2"
        cacheKeyParameters:
          - "method.request.path.albumPath"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    patch:
      parameters:
        - name: "albumPath"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::010410881828:role/${stageVariables.Role}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:010410881828:function:${stageVariables.UpdateAlbumFunctionName}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "63semf"
        cacheKeyParameters:
          - "method.request.path.albumPath"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
components:
  schemas:
    Empty:
      type: "object"
  securitySchemes:
    sigv4:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "awsSigv4"
