# -----------------------------------------------------------------------------
# Amazon AWS CloudFormation template
#
# This defines a "stack" of AWS resources needed to run Tacocat Gallery on AWS,
# such as S3 buckets, Lambda functions, DynamoDB tables and IAM roles.
#
# CloudFormation reads this template and takes care of deploying the stack of
# resources defined in this template.
AWSTemplateFormatVersion: "2010-09-09"
Description: Back end for Tacocat Gallery -- S3 image repo, Lambda processing of images, DynamoDB tables of albums, etc

# -----------------------------------------------------------------------------
# Allows this template to be written in the AWS Serverless Application Model
# (AWS SAM) syntax and when uploaded to CloudFormation, transforms and expands
# it into an AWS CloudFormation template. The main purpose is that AWS SAM
# syntax simplifies the declaration of a Lambda function and its execution
# role.
# -----------------------------------------------------------------------------
Transform: "AWS::Serverless-2016-10-31"

# -----------------------------------------------------------------------------
# Parameters that can be specified when deploying this template
# -----------------------------------------------------------------------------
Parameters:
  ApiStage:
    Type: String
    Default: prod
    AllowedValues:
      - prod
    Description: The AWS API Gateway stage to deploy the API to

# -----------------------------------------------------------------------------
# Output values for use after Cloudformation creates the stack, such as to:
#  - Import into other stacks (to create cross-stack references)
#  - Return in response (to describe stack calls)
#  - View on the AWS CloudFormation console
# For example, you can output a S3 bucket name for a stack to make the bucket
# easier to find.
# -----------------------------------------------------------------------------
Outputs:
  S3PhotoRepoBucket:
    Description: S3 bucket containing the image repository
    Value:
      Ref: "PhotoRepoS3Bucket"
  DDBGalleryItemTable:
    Description: DynamoDB table containing gallery albums and images
    Value:
      Ref: "GalleryItemDDBTable"
  Region:
    Description: AWS Region the stack has been deployed to
    Value:
      Ref: AWS::Region
  DescribeExecutionLambda:
    Description: Lambda function that calls DescribeExecution on the state machine execution. This is used by the web app to query the status of a Step Function.  This is necessary because the Step Functions API does not support CORS as of today, thus this Lambda function is used to proxy calls to Step Functions.
    Value:
      Ref: "DescribeExecutionFunction"
  ExtractMetadataLambda:
    Description: Lambda function that extracts metadata from image
    Value:
      Fn::GetAtt:
        - ExtractImageMetadataFunction
        - Arn
  RekognitionLambda:
    Description: Lambda function that uses Amazon Rekognition to detect objects and labels in image
    Value:
      Fn::GetAtt:
        - RekognitionFunction
        - Arn
  StoreAlbumLambda:
    Description: Lambda function that stores the album in DynamoDB
    Value:
      Fn::GetAtt:
        - StoreAlbumFunction
        - Arn
  DeleteAlbumLambda:
    Description: Lambda function that delete the album from DynamoDB
    Value:
      Fn::GetAtt:
        - DeleteAlbumFunction
        - Arn
  StoreImageLambda:
    Description: Lambda function that stores the image in DynamoDB
    Value:
      Fn::GetAtt:
        - StoreImageFunction
        - Arn
  DeleteImageLambda:
    Description: Lambda function that deletes the image from DynamoDB
    Value:
      Fn::GetAtt:
        - DeleteImageFunction
        - Arn
  ThumbnailLambda:
    Description: Lambda function that creates thumbnail version of image
    Value:
      Fn::GetAtt:
        - GenerateThumbnailFunction
        - Arn
  GetAlbumLambda:
    Description: Lambda function that retrieves an album and its children from DynamoDB
    Value:
      Fn::GetAtt:
        - GetAlbumFunction
        - Arn
  GetLatestAlbumLambda:
    Description: Lambda function that retrieves the latest album from DynamoDB
    Value:
      Fn::GetAtt:
        - GetLatestAlbumFunction
        - Arn
  CognitoIdentityPool:
    Description: AWS Cognito Identity Pool of users allowed to use the web app
    Value:
      Ref: TestClientIdentityPool
  ApiUrl:
    Description: URL of the gallery API endpoint
    Value: !Join
      - ""
      - - https://
        - !Ref GalleryApi
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/"
        - !Ref ApiStage

# -----------------------------------------------------------------------------
# Configuration inheritable by all Lambda functions
# -----------------------------------------------------------------------------
Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 60
    MemorySize: 256
    Handler: index.handler

# -----------------------------------------------------------------------------
# Resources are the actual AWS systems that will be provisioned
# -----------------------------------------------------------------------------
Resources:
  #
  # The API for listing albums etc.
  # This is what web and mobile apps connect to.
  # The API is served up by the AWS API Gateway.
  #
  GalleryApi:
    Type: AWS::Serverless::Api
    DependsOn: GalleryItemDDBTable
    Properties:
      DefinitionUri: ../api/api.yaml
      StageName: !Ref ApiStage
      Variables:
        Region: !Ref AWS::Region
        Role: !Ref GalleryApiRole
        ClientRole: !Ref TestClientIAMRole
        GetAlbumFunctionName: !Ref GetAlbumFunction
        GetLatestAlbumFunctionName: !Ref GetLatestAlbumFunction
        UpdateAlbumFunctionName: !Ref UpdateAlbumFunction
        UpdateImageFunctionName: !Ref UpdateImageFunction

  # Role for Gallery API
  GalleryApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "InvokeGalleryApiLambdas"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeGalleryApiLambdas"
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DescribeExecutionFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetAlbumFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetLatestAlbumFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpdateAlbumFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpdateImageFunction}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
              Federated:
                - "cognito-identity.amazonaws.com" # not using this yet
            Action:
              - "sts:AssumeRole"
              - "sts:AssumeRoleWithWebIdentity" # not using this yet

  #
  # S3 bucket containing images
  #
  PhotoRepoS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - GET
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - ETag

  #
  # DynamoDB table containing both albums and images
  #
  GalleryItemDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: parentPath
          AttributeType: S
        - AttributeName: itemName
          AttributeType: S
      KeySchema:
        - AttributeName: parentPath
          KeyType: HASH
        - AttributeName: itemName
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"

  # ---------------------------------------------------------------------------
  # IAM role used by all the Lambda functions that executes the image processing
  # workflow, so it has the union of the required permissions for these Lambda
  # functions.
  #
  # Amazon best practices would instead create individual IAM roles for each
  # Lambda to follow the Least privilege principle. This template consolidates
  # them simply to reduce the number of IAM roles it takes up in your account.
  # ---------------------------------------------------------------------------
  BackendProcessingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/Gallery/"
      Policies:
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "ReadFromPhotoRepoS3Bucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ReadFromPhotoRepoS3Bucket"
                Effect: "Allow"
                Action:
                  - "s3:Get*"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        - PolicyName: "WriteToPhotoRepoS3Bucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "WriteToPhotoRepoS3Bucket"
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        - PolicyName: "ManageGalleryItemDDBTable"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ManageGalleryItemDDBTable"
                Effect: "Allow"
                Action:
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
        - PolicyName: "RekognitionDetectLabels"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "RekognitionDetectLabels"
                Effect: "Allow"
                Action:
                  - "rekognition:DetectLabels"
                Resource: "*"
        - PolicyName: "StepFunctionStartExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "StepFunctionStartExecution"
                Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: "*"

  # -----------------------------------------------------------------------------
  # This Lambda function triggers the start of the Step Functions state machine
  # -----------------------------------------------------------------------------

  ExecuteStepFunctionsFunction:
    DependsOn: PhotoRepoS3Bucket
    Properties:
      CodeUri: ../state_machine/lambda_functions/start_state_machine
      Description: "Triggered by S3 image upload to the repo bucket and start the image processing step function workflow"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ImageProcStateMachine
    Type: AWS::Serverless::Function

  # -----------------------------------------------------------------------------
  # These Lambda functions comprise the Step Functions state machine.
  # The state machine processes album folder and image file additions and
  # deletions from a S3 bucket and puts that information into DynamoDB.
  # -----------------------------------------------------------------------------

  ExtractImageMetadataFunction:
    Properties:
      CodeUri: ../state_machine/lambda_functions/extract_image_metadata
      Description: "Lambda function that extracts image metadata such as format, size, geolocation, etc"
      MemorySize: 1024
      Timeout: 200
      Role: !GetAtt BackendProcessingLambdaRole.Arn
    Type: AWS::Serverless::Function

  TransformImageMetadataFunction:
    Properties:
      CodeUri: ../state_machine/lambda_functions/transform_image_metadata
      Description: "Lambda function that massages JSON of extracted image metadata into more usable format"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
    Type: AWS::Serverless::Function

  StoreAlbumFunction:
    Properties:
      CodeUri: ../state_machine/lambda_functions/store_album
      Description: "Lambda function that stores album in DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  DeleteAlbumFunction:
    Properties:
      CodeUri: ../state_machine/lambda_functions/delete_album
      Description: "Lambda function that deletes album from DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  StoreImageFunction:
    Properties:
      CodeUri: ../state_machine/lambda_functions/store_image
      Description: "Lambda function that stores image in DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  DeleteImageFunction:
    Properties:
      CodeUri: ../state_machine/lambda_functions/delete_image
      Description: "Lambda function that deletes image from DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  RekognitionFunction:
    Properties:
      Description: "Lambda function that uses Amazon Rekognition to detect labels from image"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      CodeUri: ../state_machine/lambda_functions/rekognition
    Type: AWS::Serverless::Function

  GenerateThumbnailFunction:
    Properties:
      CodeUri: ../state_machine/lambda_functions/thumbnail
      Description: "Lambda function that generates thumbnails for images"
      MemorySize: 1536
      Timeout: 300
      Role: !GetAtt BackendProcessingLambdaRole.Arn
    Type: AWS::Serverless::Function

  # -----------------------------------------------------------------------------
  # Lambda functions hooked up to the API Gateway API to read and write albums,
  # and their accompanying roles
  # -----------------------------------------------------------------------------

  # Lambda function that retrieves an album and its children from DynamoDB
  GetAlbumFunction:
    Properties:
      CodeUri: ../api/lambda_functions/get_album
      Description: "Lambda function that returns an album and its children from DynamoDB"
      Role: !GetAtt ApiGatewayLambdaReadOnlyRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Lambda function that retrieves the latest album from DynamoDB
  GetLatestAlbumFunction:
    Properties:
      CodeUri: ../api/lambda_functions/get_latest_album
      Description: "Lambda function that retrieves the latest album from DynamoDB"
      Role: !GetAtt ApiGatewayLambdaReadOnlyRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Lambda function that updates attributes like title and description on existing albums in DynamoDB
  UpdateAlbumFunction:
    Properties:
      CodeUri: ../api/lambda_functions/update_album
      Description: "Lambda function that updates attributes like title and description on existing albums in DynamoDB"
      Role: !GetAtt ApiGatewayLambdaWriteRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Lambda function that updates attributes like title and description on existing images in DynamoDB
  UpdateImageFunction:
    Properties:
      CodeUri: ../api/lambda_functions/update_image
      Description: "Lambda function that updates attributes like title and description on existing images in DynamoDB"
      Role: !GetAtt ApiGatewayLambdaWriteRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Role for Lambdas used by the Gallery API that need read-only access to DynamoDB
  ApiGatewayLambdaReadOnlyRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/Gallery/"
      Policies:
        - PolicyName: "GalleryDynamoTableReadAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "GalleryDynamoTableReadAccess"
                Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}/*"

  # Role for Lambdas used by the Gallery API that need write access to DynamoDB
  ApiGatewayLambdaWriteRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/Gallery/"
      Policies:
        - PolicyName: "GalleryDynamoTableWriteAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "GalleryDynamoTableWriteAccess"
                Effect: "Allow"
                Action:
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}/*"

  # ---------------------------------------------------------------------------
  # Custom resources created with Lambda functions:
  # S3 event trigger to Lambda function
  # ---------------------------------------------------------------------------
  CustomResourceHelperRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/Gallery/"
      Policies:
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "AddS3EventTrigger"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "PutS3EventNofication"
                Effect: "Allow"
                Action:
                  - "s3:PutBucketNotification"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}"
              - Sid: "AddPermissionToLambda"
                Effect: "Allow"
                Action:
                  - "lambda:AddPermission"
                Resource: "*"

  CreateS3EventTriggerFunction:
    Properties:
      Description: "Used with CloudFormation as a custom resource helper to enable S3 event trigger to invoke the start step function Lambda function."
      MemorySize: 1024
      Timeout: 200
      Role: !GetAtt CustomResourceHelperRole.Arn
      CodeUri: ../state_machine/lambda_functions/create_s3_event_trigger_helper
    Type: AWS::Serverless::Function

  S3EventTrigger:
    Type: "Custom::S3EventTrigger"
    Version: "1.0"
    DependsOn:
      - PhotoRepoS3Bucket
      - ExecuteStepFunctionsFunction
    Properties:
      ServiceToken: !GetAtt CreateS3EventTriggerFunction.Arn
      PhotoRepoS3Bucket: !Ref PhotoRepoS3Bucket
      StartExecutionFunctionArn: !GetAtt ExecuteStepFunctionsFunction.Arn
      StartExecutionFunction: !Ref ExecuteStepFunctionsFunction
      accountId: !Ref AWS::AccountId

  # ---------------------------------------------------------------------------
  # Step functions State Machine and accompanying role
  # ---------------------------------------------------------------------------

  ImageProcStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub
        - |-
        ##{{STATEMACHINE_DEF}}
        - {
            ExtractImageMetadataLambdaArn: !GetAtt ExtractImageMetadataFunction.Arn,
            TransformImageMetadataLambdaArn: !GetAtt TransformImageMetadataFunction.Arn,
            StoreAlbumLambdaArn: !GetAtt StoreAlbumFunction.Arn,
            DeleteAlbumLambdaArn: !GetAtt DeleteAlbumFunction.Arn,
            StoreImageLambdaArn: !GetAtt StoreImageFunction.Arn,
            DeleteImageLambdaArn: !GetAtt DeleteImageFunction.Arn,
            RekognitionLambdaArn: !GetAtt RekognitionFunction.Arn,
            GenerateThumbnailLambdaArn: !GetAtt GenerateThumbnailFunction.Arn,
          }
      RoleArn: !GetAtt StateMachineRole.Arn

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/Gallery/"
      Policies:
        - PolicyName: "InvokeLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeLambda"
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  # ---------------------------------------------------------------------------
  # Lambda function and accompanying role used by the frontend test web app to
  # query status of a Step Function state machine execution.
  #
  # The Step Functions API does not support CORS as of today, thus this Lambda
  # function is used to proxy calls to Step Functions.
  # ---------------------------------------------------------------------------

  DescribeExecutionFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/Gallery/"
      Policies:
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "DescribeStepFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "DescribeStepFunction"
                Effect: "Allow"
                Action:
                  - "states:DescribeExecution"
                Resource: "*"
  DescribeExecutionFunction:
    Properties:
      Description: "Calls DescribeExecution on a state machine execution."
      MemorySize: 1024
      Timeout: 200
      Role: !GetAtt DescribeExecutionFunctionRole.Arn
      CodeUri: ../state_machine/lambda_functions/describe_state_machine_execution
    Type: AWS::Serverless::Function

  # ---------------------------------------------------------------------------
  # Identity pool and role used by the test web app client
  # ---------------------------------------------------------------------------

  TestClientIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: "TestWebApp"
      AllowUnauthenticatedIdentities: true

  TestClientIdentityPoolRoles:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref TestClientIdentityPool
      Roles:
        authenticated: !GetAtt TestClientIAMRole.Arn
        unauthenticated: !GetAtt TestClientIAMRole.Arn

  TestClientIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "S3PhotoRepoBucketAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "S3ReadWrite"
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        - PolicyName: "DynamoTableAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "DynamoTableAccess"
                Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}/*"

        - PolicyName: "InvokeDescribeExecutionLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeDescribeExecutionLambda"
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DescribeExecutionFunction}"
        - PolicyName: "InvokeGetAlbumLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeGetAlbumLambda"
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetAlbumFunction}"
        - PolicyName: "InvokeGalleryApi"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeGetAlbumLambda"
                Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/album"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/album/*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRole"
              - "sts:AssumeRoleWithWebIdentity"
