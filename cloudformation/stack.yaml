# -----------------------------------------------------------------------------
# Amazon AWS CloudFormation template
#
# This defines a "stack" of AWS resources needed to run Tacocat Gallery on AWS,
# such as S3 buckets, Lambda functions, DynamoDB tables and IAM roles.
#
# CloudFormation reads this template and takes care of deploying the stack of
# resources defined in this template.
AWSTemplateFormatVersion: "2010-09-09"
Description: Back end for Tacocat Gallery -- S3 image repo, Lambda processing of images, DynamoDB tables of albums, etc

# -----------------------------------------------------------------------------
# Allows this template to be written in the AWS Serverless Application Model
# (AWS SAM) syntax and when uploaded to CloudFormation, transforms and expands
# it into an AWS CloudFormation template. The main purpose is that AWS SAM
# syntax simplifies the declaration of a Lambda function and its execution
# role.
# -----------------------------------------------------------------------------
Transform: "AWS::Serverless-2016-10-31"

# -----------------------------------------------------------------------------
# Parameters that can be specified when deploying this template
# This is the only way to define constants for use elsewhere in the template
# -----------------------------------------------------------------------------
Parameters:
  OriginalImageS3Prefix:
    Description: The key prefix of the original images within the S3 bucket, such as "albums"
    Type: String
    Default: albums
  ThumbnailImageS3Prefix:
    Description: The key prefix of the thumbnail version of images within the S3 bucket, such as "thumb"
    Type: String
    Default: thumb
  LargeImageS3Prefix:
    Description: The key prefix of the large version of images within the S3 bucket, such as "large"
    Type: String
    Default: large
  ThumbnailImageSize:
    Description: The longest edge of thumbnail images in pixels.
    Type: Number
    Default: 200
    MaxValue: 1024
    MinValue: 30
  ThumbnailImageQuality:
    Description: The JPEG quality of the thumbnail version of images on a scale of 0 to 100
    Type: Number
    Default: 85 # GraphicsMagick's default is 75.  I'm seeing smaller files at 85!
    MaxValue: 100
    MinValue: 30
  LargeImageSize:
    Description: The longest edge of the large version of images in pixels
    Type: Number
    Default: 1024
    MaxValue: 5000
    MinValue: 500
  LargeImageQuality:
    Description: The JPEG quality of the large version of images on a scale of 0 to 100
    Type: Number
    Default: 85 # GraphicsMagick's default is 75.  I'm seeing smaller files at 85!
    MaxValue: 100
    MinValue: 30
  ApiStage:
    Description: The AWS API Gateway stage to which to deploy the API
    Type: String
    Default: prod
    AllowedValues:
      - prod

# -----------------------------------------------------------------------------
# Output values for use after Cloudformation creates the stack, such as to:
#  - Import into other stacks (to create cross-stack references)
#  - Return in response (to describe stack calls)
#  - View on the AWS CloudFormation console
# For example, you can output a S3 bucket name for a stack to make the bucket
# easier to find.
# -----------------------------------------------------------------------------
Outputs:
  CloudFrontUrl:
    Description: URL of CloudFront CDN that serves the gallery's images
    Value: !Sub "https://${GalleryCloudFrontDistribution.DomainName}"
  ApiUrl:
    Description: URL of gallery API endpoint
    Value: !Sub "https://${GalleryApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}"
  S3PhotoRepoBucket:
    Description: S3 bucket containing the image repository
    Value:
      Ref: "PhotoRepoS3Bucket"
  DerivedImageS3Bucket:
    Description: S3 bucket containing derived images, like thumbnails and web-sized versions
    Value:
      Ref: "DerivedImageBucket"
  DDBGalleryItemTable:
    Description: DynamoDB table containing gallery albums and images
    Value:
      Ref: "GalleryItemDDBTable"
  Region:
    Description: AWS Region the stack has been deployed to
    Value:
      Ref: AWS::Region
  DescribeExecutionLambda:
    Description: Lambda function that calls DescribeExecution on the state machine execution. This is used by the web app to query the status of a Step Function.  This is necessary because the Step Functions API does not support CORS as of today, thus this Lambda function is used to proxy calls to Step Functions.
    Value:
      Ref: "DescribeExecutionFunction"
  ExtractMetadataLambda:
    Description: Lambda function that extracts metadata from image
    Value:
      Fn::GetAtt:
        - ExtractImageMetadataFunction
        - Arn
  StoreAlbumLambda:
    Description: Lambda function that stores the album in DynamoDB
    Value:
      Fn::GetAtt:
        - StoreAlbumFunction
        - Arn
  DeleteAlbumFromDynamoLambda:
    Description: Lambda function that delete the album from DynamoDB
    Value:
      Fn::GetAtt:
        - DeleteAlbumFromDynamoFunction
        - Arn
  StoreImageLambda:
    Description: Lambda function that stores the image in DynamoDB
    Value:
      Fn::GetAtt:
        - StoreImageFunction
        - Arn
  DeleteImageFromDynamoLambda:
    Description: Lambda function that deletes the image from DynamoDB
    Value:
      Fn::GetAtt:
        - DeleteImageFromDynamoFunction
        - Arn
  GenerateThumbnailImageLambda:
    Description: Lambda function that creates thumbnail version of image
    Value:
      Fn::GetAtt:
        - GenerateThumbnailImageFunction
        - Arn
  GenerateLargeImageLambda:
    Description: Lambda function that creates large version of image
    Value:
      Fn::GetAtt:
        - GenerateLargeImageFunction
        - Arn
  GetAlbumLambda:
    Description: Lambda function that retrieves an album and its children from DynamoDB
    Value:
      Fn::GetAtt:
        - GetAlbumFunction
        - Arn
  GetLatestAlbumLambda:
    Description: Lambda function that retrieves the latest album from DynamoDB
    Value:
      Fn::GetAtt:
        - GetLatestAlbumFunction
        - Arn
  CognitoIdentityPool:
    Description: AWS Cognito Identity Pool of users allowed to use the web app
    Value:
      Ref: TestClientIdentityPool
  TestUserName:
    Description: Name of the test user
    Value: !Ref GalleryTestUser
  TestUserAccessKey:
    Description: Access key for the test user
    Value: !Ref GalleryTestUserAccessKey
  TestUserSecretKey:
    Description: Secret key for the test user
    Value: !GetAtt GalleryTestUserAccessKey.SecretAccessKey
  OriginalImagePrefix:
    Description: The key prefix of the original images within the S3 bucket, such as "albums"
    Value: !Ref OriginalImageS3Prefix
  ThumbnailImagePrefix:
    Description: The key prefix of the thumbnail version of images within the S3 bucket, such as "thumb"
    Value: !Ref ThumbnailImageS3Prefix
  LargeImagePrefix:
    Description: The key prefix of the large version of images within the S3 bucket, such as "large"
    Value: !Ref LargeImageS3Prefix
  StateMachineArn:
    Description: ARN of the Step Functions State Machine that processes images, like cutting their thumbnails
    Value: !Ref ImageProcStateMachine

# -----------------------------------------------------------------------------
# Configuration inheritable by all Lambda functions
# -----------------------------------------------------------------------------
Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 60
    MemorySize: 256
    Handler: index.handler

# -----------------------------------------------------------------------------
# Resources are the actual AWS systems that will be provisioned
# -----------------------------------------------------------------------------
Resources:
  # -----------------------------------------------------------------------------
  # S3
  # -----------------------------------------------------------------------------

  # S3 bucket containing the original source images
  PhotoRepoS3Bucket:
    Type: AWS::S3::Bucket

  # S3 bucket containing derived images, like thumbnails and web-sized versions
  DerivedImageBucket:
    Type: AWS::S3::Bucket

  # -----------------------------------------------------------------------------
  # CloudFront
  # -----------------------------------------------------------------------------

  # Allow CloudFront CDN to retrieve original images from S3
  GalleryS3BucketCloudfrontReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref PhotoRepoS3Bucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
            Principal:
              CanonicalUser: !GetAtt GalleryS3BucketCloudFrontOriginAccessIdentity.S3CanonicalUserId

  # CloudFront identity of the original image bucket
  GalleryS3BucketCloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref PhotoRepoS3Bucket

  # Allow CloudFront CDN to retrieve derived images from S3
  DerivedImageBucketCloudFrontReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref DerivedImageBucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${DerivedImageBucket}/*"
            Principal:
              CanonicalUser: !GetAtt DerivedImageBucketCloudFrontOriginAccessIdentity.S3CanonicalUserId

  # CloudFront identity of the derived image bucket
  DerivedImageBucketCloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref DerivedImageBucket

  # CloudFront distribution that serves the images to users
  GalleryCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - PhotoRepoS3Bucket
      - DerivedImageBucket
    Properties:
      DistributionConfig:
        Comment: Serves Tacocat photo gallery images to end users
        Enabled: "true"
        HttpVersion: "http2" # allow http2 and anything lower
        PriceClass: PriceClass_100 # PriceClass_100 = the cheapest class: just US, Canada and Europe
        Origins:
          - DomainName: !GetAtt PhotoRepoS3Bucket.DomainName
            Id: TacocatGalleryS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${GalleryS3BucketCloudFrontOriginAccessIdentity}"
          - DomainName: !GetAtt DerivedImageBucket.DomainName
            Id: DerivedImageOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${DerivedImageBucketCloudFrontOriginAccessIdentity}"
        CacheBehaviors:
          - PathPattern: !Sub "${OriginalImageS3Prefix}/*.jpg" # CacheBehavior for original images
            TargetOriginId: TacocatGalleryS3Origin
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
        DefaultCacheBehavior:
          TargetOriginId: DerivedImageOrigin
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"

  # -----------------------------------------------------------------------------
  # DynamoDB table containing both albums and images
  # -----------------------------------------------------------------------------
  GalleryItemDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: parentPath
          AttributeType: S
        - AttributeName: itemName
          AttributeType: S
      KeySchema:
        - AttributeName: parentPath
          KeyType: HASH
        - AttributeName: itemName
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"
      StreamSpecification: # enable streaming so that the SearchIndexerFunction lambda can send the stream to be indexed by search engine
        StreamViewType: "NEW_IMAGE"

  # -----------------------------------------------------------------------------
  # The AWS API Gateway API for listing albums etc.
  # This is what web and mobile apps connect to.
  # -----------------------------------------------------------------------------
  GalleryApi:
    Type: AWS::Serverless::Api
    DependsOn: GalleryItemDDBTable
    Properties:
      DefinitionUri: ../api/api.yaml
      StageName: !Ref ApiStage
      Variables:
        Region: !Ref AWS::Region
        Role: !Sub "Gallery/${GalleryApiRole}"
        ClientRole: !Ref TestClientIAMRole
        GetAlbumFunctionName: !Ref GetAlbumFunction
        GetLatestAlbumFunctionName: !Ref GetLatestAlbumFunction
        UpdateAlbumFunctionName: !Ref UpdateAlbumFunction
        UpdateImageFunctionName: !Ref UpdateImageFunction
        RecutThumbnailFunctionName: !Ref RecutThumbnailFunction

  # Role for Gallery API
  GalleryApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      Policies:
        - PolicyName: InvokeGalleryApiLambdas
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: InvokeGalleryApiLambdas
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DescribeExecutionFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetAlbumFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetLatestAlbumFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${RecutThumbnailFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpdateAlbumFunction}"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UpdateImageFunction}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  # ---------------------------------------------------------------------------
  # IAM role used by all the Lambda functions that executes the image processing
  # workflow, so it has the union of the required permissions for these Lambda
  # functions.
  #
  # Amazon best practices would instead create individual IAM roles for each
  # Lambda to follow the Least privilege principle. This template consolidates
  # them simply to reduce the number of IAM roles it takes up in your account.
  # ---------------------------------------------------------------------------
  BackendProcessingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaWriteCWLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: ReadFromPhotoRepoS3Bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ReadFromPhotoRepoS3Bucket
                Effect: Allow
                Action:
                  - "s3:Get*"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        - PolicyName: ModifyDerivedImageBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ModifyDerivedImageBucket
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${DerivedImageBucket}/*"
        - PolicyName: ManageGalleryItemDDBTable
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ManageGalleryItemDDBTable
                Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
        - PolicyName: StepFunctionStartExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: StepFunctionStartExecution
                Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: "*"

  # -----------------------------------------------------------------------------
  # Lambda function that triggers the start of the Step Functions state machine
  # -----------------------------------------------------------------------------

  ExecuteStepFunctionsFunction:
    Type: AWS::Serverless::Function
    DependsOn: PhotoRepoS3Bucket
    Properties:
      CodeUri: dist/state_machine/lambda_functions/start_state_machine
      Description: "Triggered by S3 image upload to the repo bucket and start the image processing step function workflow"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ImageProcStateMachine

  # -----------------------------------------------------------------------------
  # Lambda functions that comprise the Step Functions state machine.
  # The state machine processes album folder and image file additions and
  # deletions from a S3 bucket and puts that information into DynamoDB.
  # -----------------------------------------------------------------------------

  ExtractImageMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/extract_image_metadata
      Description: "Step Functions function that extracts image metadata such as format, size, geolocation, etc"
      MemorySize: 1024
      Timeout: 200
      Role: !GetAtt BackendProcessingLambdaRole.Arn

  TransformImageMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/transform_image_metadata
      Description: "Step Functions function that massages JSON of extracted image metadata into more usable format"
      Role: !GetAtt BackendProcessingLambdaRole.Arn

  StoreAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/store_album
      Description: "Step Functions function that stores album in DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable

  DeleteAlbumFromDynamoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/delete_album_from_dynamo
      Description: "Step Functions function that deletes album from DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable

  StoreImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/store_image
      Description: "Step Functions function that stores image in DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      # The AWS javascript SDK that comes with Lambda doesn't have transactions.  Until it does, use this layer I created
      Layers:
        - "arn:aws:lambda:us-west-2:010410881828:layer:aws-sdk:1"
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable

  DeleteImageFromDynamoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/delete_image_from_dynamo
      Description: "Step Functions function that deletes image from DynamoDB"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable

  DeleteResizedImagesFromS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/delete_resized_images_from_s3
      Description: "Step Functions function that deletes resized versions of image from S3"
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          DERIVED_IMAGE_BUCKET: !Ref DerivedImageBucket
          THUMBNAIL_IMAGE_S3_PREFIX: !Ref ThumbnailImageS3Prefix
          LARGE_IMAGE_S3_PREFIX: !Ref LargeImageS3Prefix

  GenerateThumbnailImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/generate_thumbnail_image
      Description: "Step Functions function that generates thumbnail version of image"
      MemorySize: 1536
      Timeout: 300
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          DERIVED_IMAGE_BUCKET: !Ref DerivedImageBucket
          THUMBNAIL_IMAGE_S3_PREFIX: !Ref ThumbnailImageS3Prefix
          THUMBNAIL_IMAGE_SIZE: !Ref ThumbnailImageSize
          THUMBNAIL_IMAGE_QUALITY: !Ref ThumbnailImageQuality

  GenerateLargeImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/state_machine/lambda_functions/generate_large_image
      Description: "Step Functions function that generates large version of image"
      MemorySize: 1536
      Timeout: 300
      Role: !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          DERIVED_IMAGE_BUCKET: !Ref DerivedImageBucket
          LARGE_IMAGE_S3_PREFIX: !Ref LargeImageS3Prefix
          LARGE_IMAGE_SIZE: !Ref LargeImageSize
          LARGE_IMAGE_QUALITY: !Ref LargeImageQuality

  # -----------------------------------------------------------------------------
  # Lambda for moving albums and images from DynamoDB to ElasticSearch,
  # ... and a mapping that streams events from DynamoDB to the lambda
  # ... and the lambda's accompanying role
  # -----------------------------------------------------------------------------

  # Lambda function that moves albums and images from DynamoDB to ElasticSearch
  SearchIndexerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../search_indexing/lambda_functions/dynamodb_to_elasticsearch
      Description: "Syncs albums and images from DynamoDB to ElasticSearch"
      Role: !GetAtt SearchIndexerFunctionRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable

  # Event mapping between DynamoDB and SearchIndexerFunction.
  # Whenever there's something new in DynamoDB Streams it will
  # trigger the lambda function with those records
  TableStreamLambdaMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 2
      EventSourceArn: !GetAtt GalleryItemDDBTable.StreamArn
      FunctionName: !GetAtt SearchIndexerFunction.Arn
      StartingPosition: "LATEST"

  # Role that allows the SearchIndexerFunction to:
  # 1) write logs to CloudWatch
  # 2) read DynamoDB streams
  SearchIndexerFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SearchIndexerFunctionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt GalleryItemDDBTable.StreamArn

  # -----------------------------------------------------------------------------
  # Lambda functions hooked up to the API Gateway API to read and write albums,
  # and their accompanying roles
  # -----------------------------------------------------------------------------

  # Lambda function that retrieves an album and its children from DynamoDB
  GetAlbumFunction:
    Properties:
      CodeUri: dist/api/lambda_functions/get_album
      Description: "API Gateway function that returns an album and its children from DynamoDB"
      Role: !GetAtt ApiGatewayLambdaReadOnlyRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Lambda function that retrieves the latest album from DynamoDB
  GetLatestAlbumFunction:
    Properties:
      CodeUri: dist/api/lambda_functions/get_latest_album
      Description: "API Gateway function that retrieves the latest album from DynamoDB"
      Role: !GetAtt ApiGatewayLambdaReadOnlyRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Lambda function that updates attributes like title and description on existing albums in DynamoDB
  UpdateAlbumFunction:
    Properties:
      CodeUri: dist/api/lambda_functions/update_album
      Description: "API Gateway function that updates attributes like title and description on existing albums in DynamoDB"
      Role: !GetAtt ApiGatewayLambdaWriteRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Lambda function that updates attributes like title and description on existing images in DynamoDB
  UpdateImageFunction:
    Properties:
      CodeUri: dist/api/lambda_functions/update_image
      Description: "API Gateway function that updates attributes like title and description on existing images in DynamoDB"
      Role: !GetAtt ApiGatewayLambdaWriteRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Type: AWS::Serverless::Function

  # Lambda function that regenerates an image's thumbnail to the specified region of the image
  RecutThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/api/lambda_functions/recut_thumbnail
      Description: "API Gateway function that re-cuts an image's thumbnail to the specified region of the image"
      MemorySize: 1536
      Timeout: 300
      Role: !GetAtt ApiGatewayLambdaWriteDBAndPhotosRole.Arn
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
          ORIGINAL_IMAGE_BUCKET: !Ref PhotoRepoS3Bucket
          ORIGINAL_IMAGE_S3_PREFIX: !Ref OriginalImageS3Prefix
          DERIVED_IMAGE_BUCKET: !Ref DerivedImageBucket
          THUMBNAIL_IMAGE_S3_PREFIX: !Ref ThumbnailImageS3Prefix
          THUMBNAIL_IMAGE_SIZE: !Ref ThumbnailImageSize
          THUMBNAIL_IMAGE_QUALITY: !Ref ThumbnailImageQuality

  # Role for Lambdas used by the Gallery API that need read-only access to DynamoDB
  ApiGatewayLambdaReadOnlyRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "GalleryDynamoTableReadAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "GalleryDynamoTableReadAccess"
                Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}/*"
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # Role for Lambdas used by the Gallery API that need write access to DynamoDB
  ApiGatewayLambdaWriteRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "GalleryDynamoTableWriteAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "GalleryDynamoTableWriteAccess"
                Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}/*"
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # Role for Lambdas used by the Gallery API that need write access to DynamoDB *and* write access to the images in S3
  ApiGatewayLambdaWriteDBAndPhotosRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "GalleryDynamoTableWriteAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "GalleryDynamoTableWriteAccess"
                Effect: Allow
                Action:
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}/*"
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "ReadFromPhotoRepoS3Bucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ReadFromPhotoRepoS3Bucket"
                Effect: Allow
                Action:
                  - "s3:Get*"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        - PolicyName: "WriteToDerivedImageBucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "WriteToDerivedImageBucket"
                Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DerivedImageBucket}/*"

  # ---------------------------------------------------------------------------
  # Custom resources created with Lambda functions:
  # S3 event trigger to Lambda function
  # ---------------------------------------------------------------------------
  CustomResourceHelperRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "AddS3EventTrigger"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "PutS3EventNofication"
                Effect: Allow
                Action:
                  - "s3:PutBucketNotification"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}"
              - Sid: "AddPermissionToLambda"
                Effect: Allow
                Action:
                  - "lambda:AddPermission"
                Resource: "*"

  CreateS3EventTriggerFunction:
    Properties:
      Description: "Used with CloudFormation as a custom resource helper to enable S3 event trigger to invoke the start step function Lambda function."
      MemorySize: 1024
      Timeout: 200
      Role: !GetAtt CustomResourceHelperRole.Arn
      CodeUri: dist/state_machine/lambda_functions/create_s3_event_trigger_helper
    Type: AWS::Serverless::Function

  S3EventTrigger:
    Type: "Custom::S3EventTrigger"
    Version: "1.0"
    DependsOn:
      - PhotoRepoS3Bucket
      - ExecuteStepFunctionsFunction
    Properties:
      ServiceToken: !GetAtt CreateS3EventTriggerFunction.Arn
      PhotoRepoS3Bucket: !Ref PhotoRepoS3Bucket
      StartExecutionFunctionArn: !GetAtt ExecuteStepFunctionsFunction.Arn
      StartExecutionFunction: !Ref ExecuteStepFunctionsFunction
      accountId: !Ref AWS::AccountId

  # ---------------------------------------------------------------------------
  # Step functions State Machine and accompanying role
  # ---------------------------------------------------------------------------

  ImageProcStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub
        - |-
        ##{{STATEMACHINE_DEF}}
        - {
            ExtractImageMetadataLambdaArn: !GetAtt ExtractImageMetadataFunction.Arn,
            TransformImageMetadataLambdaArn: !GetAtt TransformImageMetadataFunction.Arn,
            StoreAlbumLambdaArn: !GetAtt StoreAlbumFunction.Arn,
            DeleteAlbumFromDynamoLambdaArn: !GetAtt DeleteAlbumFromDynamoFunction.Arn,
            StoreImageLambdaArn: !GetAtt StoreImageFunction.Arn,
            DeleteImageFromDynamoLambdaArn: !GetAtt DeleteImageFromDynamoFunction.Arn,
            DeleteResizedImagesFromS3LambdaArn: !GetAtt DeleteResizedImagesFromS3Function.Arn,
            GenerateThumbnailImageLambdaArn: !GetAtt GenerateThumbnailImageFunction.Arn,
            GenerateLargeImageLambdaArn: !GetAtt GenerateLargeImageFunction.Arn,
          }
      RoleArn: !GetAtt StateMachineRole.Arn

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "InvokeLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeLambda"
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  # ---------------------------------------------------------------------------
  # Lambda function and accompanying role used by the frontend test web app to
  # query status of a Step Function state machine execution.
  #
  # The Step Functions API does not support CORS as of today, thus this Lambda
  # function is used to proxy calls to Step Functions.
  # ---------------------------------------------------------------------------

  DescribeExecutionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Calls DescribeExecution on a state machine execution."
      MemorySize: 1024
      Timeout: 200
      Role: !GetAtt DescribeExecutionFunctionRole.Arn
      CodeUri: dist/state_machine/lambda_functions/describe_state_machine_execution

  DescribeExecutionFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/Gallery/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowLogging"
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "DescribeStepFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "DescribeStepFunction"
                Effect: Allow
                Action:
                  - "states:DescribeExecution"
                Resource: "*"

  # ---------------------------------------------------------------------------
  # Identity pool and role used by the test web app client
  # ---------------------------------------------------------------------------

  TestClientIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: "TestWebApp"
      AllowUnauthenticatedIdentities: true

  TestClientIdentityPoolRoles:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref TestClientIdentityPool
      Roles:
        authenticated: !GetAtt TestClientIAMRole.Arn
        unauthenticated: !GetAtt TestClientIAMRole.Arn

  TestClientIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "S3PhotoRepoBucketAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "S3ReadWrite"
                Effect: Allow
                Action:
                  - "s3:*"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        - PolicyName: "DynamoTableAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "DynamoTableAccess"
                Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${GalleryItemDDBTable}/*"
        - PolicyName: "InvokeDescribeExecutionLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeDescribeExecutionLambda"
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DescribeExecutionFunction}"
        - PolicyName: "InvokeGetAlbumLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeGetAlbumLambda"
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetAlbumFunction}"
        - PolicyName: "InvokeGalleryApi"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeGetAlbumLambda"
                Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/album"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/album/*"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/image"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/image/*"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/thumb/*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRole"
              - "sts:AssumeRoleWithWebIdentity"

  # ---------------------------------------------------------------------------
  # User groups
  # ---------------------------------------------------------------------------

  # User group for gallery administrators
  GalleryAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      Path: "/Gallery/"
      Policies:
        - PolicyName: InvokeGalleryApi
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: InvokeGalleryApi
                Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/album/*"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/image/*"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/thumb/*"
        - PolicyName: ManageOriginalImageBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ManageOriginalImageBucket
                Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"

  # User group for integration test code, which needs access to pretty much everything
  GalleryTestGroup:
    Type: AWS::IAM::Group
    Properties:
      Path: "/Gallery/"
      Policies:
        - PolicyName: InvokeGalleryApi
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: InvokeGalleryApi
                Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/album/*"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/image/*"
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GalleryApi}/${ApiStage}/PATCH/thumb/*"
        - PolicyName: ManageOriginalImageBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ManageOriginalImageBucket
                Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        - PolicyName: DescribeCloudFormationStacks
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DescribeCloudFormationStacks
                Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                Resource: "*"
        - PolicyName: ListStateMachineExecutions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ListStateMachineExecutions
                Effect: Allow
                Action:
                  - "states:ListExecutions"
                Resource:
                  - !Ref ImageProcStateMachine

  # User under which test code runs
  GalleryTestUser:
    Type: AWS::IAM::User
    Properties:
      Path: "/Gallery/"
      Groups:
        - !Ref GalleryTestGroup

  # Access key for test user
  # The only place you can get the secret is in this template's outputs; you can't get the secret from the AWS console
  GalleryTestUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref GalleryTestUser
