# -----------------------------------------------------------------------------
# Amazon AWS CloudFormation template
#
# This defines a "stack" of AWS resources needed to run Tacocat Gallery on AWS,  
# such as S3 buckets, Lambda functions, DynamoDB tables and IAM roles.
#
# CloudFormation reads this template and takes care of deploying the stack of 
# resources defined in this template.
# -----------------------------------------------------------------------------
AWSTemplateFormatVersion: '2010-09-09'
Description: Back end for Tacocat Gallery -- S3 image repo, Lambda processing of images, DynamoDB tables of albums, etc

# -----------------------------------------------------------------------------
# Allows this template to be written in the AWS Serverless Application Model 
# (AWS SAM) syntax and when uploaded to CloudFormation, transforms and expands
# it into an AWS CloudFormation template. The main purpose is that AWS SAM 
# syntax simplifies the declaration of a Lambda function and its execution 
# role.
# -----------------------------------------------------------------------------
Transform: 'AWS::Serverless-2016-10-31'

# -----------------------------------------------------------------------------
# Output values for use after Cloudformation creates the stack, such as to:
#  - Import into other stacks (to create cross-stack references)
#  - Return in response (to describe stack calls)
#  - View on the AWS CloudFormation console
# For example, you can output a S3 bucket name for a stack to make the bucket
# easier to find.
# -----------------------------------------------------------------------------
Outputs:
  S3PhotoRepoBucket:
    Description: S3 bucket containing the image repository
    Value:
      Ref: "PhotoRepoS3Bucket"
  DDBAlbumMetadataTable:
    Description: DynamoDB table containing albums
    Value:
      Ref: "AlbumMetadataDDBTable"
  DDBImageMetadataTable:
    Description: DynamoDB table containing individual images
    Value:
      Ref: "ImageMetadataDDBTable"
  Region:
    Description: AWS Region the stack has been deployed to
    Value:
      Ref: AWS::Region
  DescribeExecutionLambda:
    Description: Lambda function that calls DescribeExecution on the state machine execution. This is used by the web app to query the status of a Step Function.  This is necessary because the Step Functions API does not support CORS as of today, thus this Lambda function is used to proxy calls to Step Functions.
    Value:
      Ref: "DescribeExecutionFunction"
  ExtractMetadataLambda:
    Description: Lambda function that extracts metadata from image
    Value:
      Fn::GetAtt:
      - ExtractImageMetadataFunction
      - Arn
  RekognitionLambda:
    Description: Lambda function that uses Amazon Rekognition to detect objects and labels in image 
    Value:
      Fn::GetAtt:
      - RekognitionFunction
      - Arn
  StoreImageMetadataLambda:
    Description: Lambda function that stores the image metadata into DynamoDB
    Value:
      Fn::GetAtt:
      - StoreImageMetadataFunction
      - Arn
  ThumbnailLambda:
    Description: Lambda function that creates thumbnail version of image
    Value:
      Fn::GetAtt:
      - GenerateThumbnailFunction
      - Arn
  CognitoIdentityPool:
    Description: AWS Cognito Identity Pool of users allowed to use the web app
    Value:
      Ref: TestClientIdentityPool

# -----------------------------------------------------------------------------
# Shared configuration inherited by all Lambda functions
# -----------------------------------------------------------------------------
Globals:
  Function:
    #Runtime: nodejs8.10 -- upgrade Node.js after I get everything working
    Runtime: nodejs4.3
    Timeout: 60
    MemorySize: 256
    Handler: index.handler

# -----------------------------------------------------------------------------
# Resources are the actual AWS systems that will be provisioned
# -----------------------------------------------------------------------------
Resources:

  #
  # S3 bucket containing images
  #
  PhotoRepoS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          -
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - GET
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - ETag

  #
  # DynamoDB table for images
  #
  ImageMetadataDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: albumID
        AttributeType: S
      - AttributeName: imageID
        AttributeType: S
      - AttributeName: uploadTime
        AttributeType: N
      KeySchema:
      - AttributeName: imageID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
      GlobalSecondaryIndexes:
      - IndexName: albumID-uploadTime-index
        KeySchema:
        - AttributeName: albumID
          KeyType: HASH
        - AttributeName: uploadTime
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '3'
          WriteCapacityUnits: '3'

  #
  # DynamoDB table for albums
  #
  AlbumMetadataDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: albumID
        AttributeType: S
      - AttributeName: creationTime
        AttributeType: N
      - AttributeName: userID
        AttributeType: S
      KeySchema:
      - AttributeName: albumID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '2'
        WriteCapacityUnits: '1'
      GlobalSecondaryIndexes:
      - IndexName: userID-creationTime-index
        KeySchema:
        - AttributeName: userID
          KeyType: HASH
        - AttributeName: creationTime
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '1'

  # ---------------------------------------------------------------------------
  # IAM role used by Lambda functions that executes the image processing 
  # workflow, so it has the union of the required permissions for these Lambda
  # functions. You might instead create individual IAM roles for each Lambda 
  # function to follow the Least privilege principle. This template consolidates
  # them simply to reduce the number of IAM roles it takes up in your account.
  # ---------------------------------------------------------------------------
  BackendProcessingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/MediaSharingRefarch/"
      Policies:
        -
          PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        -
          PolicyName: "ReadFromPhotoRepoS3Bucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "ReadFromPhotoRepoS3Bucket"
                Effect: "Allow"
                Action:
                  - "s3:Get*"
                Resource:
                  !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        -
          PolicyName: "WriteToPhotoRepoS3Bucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "WriteToPhotoRepoS3Bucket"
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        -
          PolicyName: "WriteToImageMetadataDDBTable"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "WriteToImageMetadataDDBTable"
                Effect: "Allow"
                Action:
                  -  "dynamodb:UpdateItem"
                  -  "dynamodb:PutItem"
                Resource:
                  !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}"
        -
          PolicyName: "RekognitionDetectLabels"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "RekognitionDetectLabels"
                Effect: "Allow"
                Action:
                  - "rekognition:DetectLabels"
                Resource: "*"
        -
          PolicyName: "StepFunctionStartExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "StepFunctionStartExecution"
                Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: "*"

# -----------------------------------------------------------------------------
# This Lambda function triggers the start of the Step Functions state machine.
# This state machine executes the image processing workflow.
# -----------------------------------------------------------------------------

  ImageProcStartExecutionFunction:
    DependsOn: PhotoRepoS3Bucket
    Properties:
      CodeUri: ../lambda_functions/start-execution
      Description: "Triggered by S3 image upload to the repo bucket and start the image processing step function workflow"
      Role:
        !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          IMAGE_METADATA_DDB_TABLE: !Ref ImageMetadataDDBTable
          STATE_MACHINE_ARN: !Ref ImageProcStateMachine
    Type: AWS::Serverless::Function

# -----------------------------------------------------------------------------
# These Lambda functions comprise the Step Functions state machine.
# This state machine executes the image processing workflow.
# -----------------------------------------------------------------------------

  ExtractImageMetadataFunction:
    Properties:
      CodeUri: ../lambda_functions/extract-image-metadata
      Description: "Lambda function that extracts image metadata such as format, size, geolocation, etc."
      MemorySize: 1024
      Timeout: 200
      Role:
        !GetAtt BackendProcessingLambdaRole.Arn
    Type: AWS::Serverless::Function

  TransformMetadataFunction:
    Properties:
      CodeUri: ../lambda_functions/transform-metadata
      Description: "Lambda function that massages JSON of extracted image metadata"
      Role:
        !GetAtt BackendProcessingLambdaRole.Arn
    Type: AWS::Serverless::Function

  StoreImageMetadataFunction:
    Properties:
      CodeUri: ../lambda_functions/store-image-metadata
      Description: "Lambda function that stores image metadata into database"
      Role:
        !GetAtt BackendProcessingLambdaRole.Arn
      Environment:
        Variables:
          IMAGE_METADATA_DDB_TABLE: !Ref ImageMetadataDDBTable
    Type: AWS::Serverless::Function

  RekognitionFunction:
    Properties:
      Description: "Lambda function that uses Amazon Rekognition to detect labels from image"
      Role:
        !GetAtt BackendProcessingLambdaRole.Arn
      CodeUri: ../lambda_functions/rekognition
    Type: AWS::Serverless::Function

  GenerateThumbnailFunction:
    Properties:
      CodeUri: ../lambda_functions/thumbnail
      Description: "Lambda function that generates thumbnails for images"
      MemorySize: 1536
      Timeout: 300
      Role:
        !GetAtt BackendProcessingLambdaRole.Arn
    Type: AWS::Serverless::Function

  # ---------------------------------------------------------------------------
  # Custom resources created with Lambda functions:
  # S3 event trigger to Lambda function
  # ---------------------------------------------------------------------------
  CustomResourceHelperRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/MediaSharingRefarch/"
      Policies:
        -
          PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        -
          PolicyName: "AddS3EventTrigger"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "PutS3EventNofication"
                Effect: "Allow"
                Action:
                  - "s3:PutBucketNotification"
                Resource:
                  !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}"
              -
                Sid: "AddPermissionToLambda"
                Effect: "Allow"
                Action:
                  - "lambda:AddPermission"
                Resource: "*"

  CreateS3EventTriggerFunction:
    Properties:
      Description: "Used with CloudFormation as a custom resource helper to enable S3 event trigger to invoke the start step function Lambda function."
      MemorySize: 1024
      Timeout: 200
      Role:
        !GetAtt CustomResourceHelperRole.Arn
      CodeUri: ../lambda_functions/create-s3-event-trigger-helper
    Type: AWS::Serverless::Function

  S3EventTrigger:
    Type: "Custom::S3EventTrigger"
    Version: "1.0"
    DependsOn:
      - PhotoRepoS3Bucket
      - ImageProcStartExecutionFunction
    Properties:
      ServiceToken:
        !GetAtt CreateS3EventTriggerFunction.Arn
      PhotoRepoS3Bucket:
        !Ref PhotoRepoS3Bucket
      StartExecutionFunctionArn:
        !GetAtt ImageProcStartExecutionFunction.Arn
      StartExecutionFunction:
        !Ref ImageProcStartExecutionFunction
      accountId:
        !Ref AWS::AccountId

  # ---------------------------------------------------------------------------
  # Step functions State Machine
  # ---------------------------------------------------------------------------
  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/MediaSharingRefarch/"
      Policies:
        -
          PolicyName: "InvokeLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "InvokeLambda"
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  ImageProcStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
          ##{{STATEMACHINE_DEF}}
          - {ExtractImageMetadataLambdaArn: !GetAtt ExtractImageMetadataFunction.Arn,
             TransformMetadataLambdaArn: !GetAtt TransformMetadataFunction.Arn,
             StoreImageMetadataLambdaArn: !GetAtt StoreImageMetadataFunction.Arn,
             RekognitionLambdaArn: !GetAtt RekognitionFunction.Arn,
             GenerateThumbnailLambdaArn: !GetAtt GenerateThumbnailFunction.Arn}
      RoleArn: !GetAtt StateMachineRole.Arn

  # ---------------------------------------------------------------------------
  # Lambda function and accompanying role used by the frontend test web app to 
  # query status of a Step Function state machine execution. 
  #
  # The Step Functions API does not support CORS as of today, thus this Lambda 
  # function is used to proxy calls to Step Functions.
  # ---------------------------------------------------------------------------
  
  DescribeExecutionFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/MediaSharingRefarch/"
      Policies:
        -
          PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        -
          PolicyName: "DescribeStepFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "DescribeStepFunction"
                Effect: "Allow"
                Action:
                  - "states:DescribeExecution"
                Resource: "*"
  DescribeExecutionFunction:
    Properties:
      Description: "Calls DescribeExecution on a state machine execution."
      MemorySize: 1024
      Timeout: 200
      Role:
        !GetAtt DescribeExecutionFunctionRole.Arn
      CodeUri: ../lambda_functions/state-machine-describe-execution
    Type: AWS::Serverless::Function

  # ---------------------------------------------------------------------------
  # Identity pool used by the test web app client
  # ---------------------------------------------------------------------------

  TestClientIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: "TestWebApp"
      AllowUnauthenticatedIdentities: true

  TestClientIdentityPoolRoles:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref TestClientIdentityPool
      Roles:
        authenticated: !GetAtt TestClientIAMRole.Arn
        unauthenticated: !GetAtt TestClientIAMRole.Arn

  TestClientIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        -
          PolicyName: "S3PhotoRepoBucketAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "S3ReadWrite"
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  !Sub "arn:aws:s3:::${PhotoRepoS3Bucket}/*"
        -
          PolicyName: "DynamoTableAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "DynamoTableAccess"
                Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AlbumMetadataDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AlbumMetadataDDBTable}/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}/*"
        -
          PolicyName: "InvokeDescribeExecutionLambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "InvokeDescribeExecutionLambda"
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DescribeExecutionFunction}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRole"
              - "sts:AssumeRoleWithWebIdentity"